'From Squeak4.2 of 4 February 2011 [latest update: #10966] on 8 August 2011 at 10:30:19 am'!Object subclass: #MpConstants	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MessagePack-Core'!Object subclass: #MpDecoder	instanceVariableNames: 'readStream typeMapper settings'	classVariableNames: ''	poolDictionaries: ''	category: 'MessagePack-Core'!Object subclass: #MpEncoder	instanceVariableNames: 'writeStream typeMapper settings'	classVariableNames: ''	poolDictionaries: ''	category: 'MessagePack-Core'!Error subclass: #MpError	instanceVariableNames: 'type'	classVariableNames: ''	poolDictionaries: ''	category: 'MessagePack-Core'!Object subclass: #MpMessagePack	instanceVariableNames: ''	classVariableNames: 'Default DialectSpecificClass'	poolDictionaries: ''	category: 'MessagePack-Core'!Object subclass: #MpPortableUtil	instanceVariableNames: ''	classVariableNames: 'Default DialectSpecificClass'	poolDictionaries: ''	category: 'MessagePack-Core'!Object subclass: #MpSettings	instanceVariableNames: 'settingsDict'	classVariableNames: ''	poolDictionaries: ''	category: 'MessagePack-Core'!Object subclass: #MpTypeMapper	instanceVariableNames: 'actionMap'	classVariableNames: ''	poolDictionaries: ''	category: 'MessagePack-Core'!MpTypeMapper subclass: #MpDecodeTypeMapper	instanceVariableNames: 'decoder'	classVariableNames: ''	poolDictionaries: ''	category: 'MessagePack-Core'!MpTypeMapper subclass: #MpEncodeTypeMapper	instanceVariableNames: 'encoder'	classVariableNames: ''	poolDictionaries: ''	category: 'MessagePack-Core'!MpTypeMapper class	instanceVariableNames: 'actionMap'!!Object methodsFor: '*MessagePack-Core-packing' stamp: 'mu 5/1/2011 21:26'!messagePacked	^ MpEncoder encode: self! !!Behavior methodsFor: '*MessagePack-Core-unpacking' stamp: 'mu 5/1/2011 21:27'!fromMessagePack: bytes	^ MpDecoder decode: bytes! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:00'!array16	^16rDC! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:00'!array32	^16rDD! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:01'!double	^16rCB! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:01'!falseValue	^16rC2! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:01'!float	^16rCA! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:01'!int16	^16rD1! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:02'!int32	^16rD2! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:02'!int64	^16rD3! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:02'!int8	^16rD0! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:02'!map16	^16rDE! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:02'!map32	^16rDF! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:02'!nilValue	^16rC0! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:02'!raw16	^16rDA! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:02'!raw32	^16rDB! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:02'!trueValue	^16rC3! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:02'!uint16	^16rCD! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:02'!uint32	^16rCE! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:03'!uint64	^16rCF! !!MpConstants class methodsFor: 'typecodes' stamp: 'mu 6/23/2011 12:03'!uint8	^16rCC! !!MpDecoder methodsFor: 'stream-like' stamp: 'mu 6/7/2011 17:53'!atEnd	^self readStream atEnd! !!MpDecoder methodsFor: 'stream-like' stamp: 'mu 6/7/2011 17:54'!next	^self read! !!MpDecoder methodsFor: 'factory' stamp: 'mu 4/30/2011 23:46'!createArray: size	^Array new: size! !!MpDecoder methodsFor: 'factory' stamp: 'mu 4/29/2011 23:40'!createDictionary: size	^Dictionary new: size! !!MpDecoder methodsFor: 'factory' stamp: 'mu 4/29/2011 23:40'!createOrderedCollection: size	^OrderedCollection new: size! !!MpDecoder methodsFor: 'factory' stamp: 'mu 6/2/2011 17:41'!settingsClass	^MpSettings! !!MpDecoder methodsFor: 'factory' stamp: 'mu 4/29/2011 23:42'!typeMapperClass	^MpDecodeTypeMapper! !!MpDecoder methodsFor: 'decoding' stamp: 'mu 5/2/2011 14:15'!decode	self readStream atEnd ifTrue: [^self signalError: 'No data to read'].	^self read! !!MpDecoder methodsFor: 'decoding' stamp: 'mu 4/29/2011 23:40'!decode: byteArray	^self decodeFrom: byteArray readStream! !!MpDecoder methodsFor: 'decoding' stamp: 'mu 4/29/2011 23:40'!decodeFrom: aStream	self readStream: aStream "binary".	^self decode! !!MpDecoder methodsFor: 'reading' stamp: 'mu 4/30/2011 23:43'!read	^self readObject.	! !!MpDecoder methodsFor: 'reading' stamp: 'mu 4/30/2011 23:45'!readArray16	| size |	size := MpPortableUtil default readUint16From: self readStream.	^ self readArraySized: size! !!MpDecoder methodsFor: 'reading' stamp: 'mu 4/30/2011 23:45'!readArray32	| size |	size := MpPortableUtil default readUint32From: self readStream.	^ self readArraySized: size! !!MpDecoder methodsFor: 'reading' stamp: 'mu 5/29/2011 23:59'!readDouble	"64 bit"	^MpPortableUtil default readDoubleFrom: self readStream! !!MpDecoder methodsFor: 'reading' stamp: 'mu 4/30/2011 23:15'!readFalse	^false! !!MpDecoder methodsFor: 'reading' stamp: 'mu 6/7/2011 21:00'!readFixArray: firstByte	| size |	size := (firstByte bitAnd: 2r1111).	^ self readArraySized: size! !!MpDecoder methodsFor: 'reading' stamp: 'mu 6/7/2011 21:00'!readFixMap: firstByte	| size |	size := (firstByte bitAnd: 2r1111).	^self readMapSized: size! !!MpDecoder methodsFor: 'reading' stamp: 'mu 6/7/2011 21:00'!readFixRaw: firstByte	| size |	size := (firstByte bitAnd: 2r11111).	^self readStream next: size! !!MpDecoder methodsFor: 'reading' stamp: 'mu 6/2/2011 12:24'!readFloat	"32 bit"	^MpPortableUtil default readFloatFrom: self readStream	! !!MpDecoder methodsFor: 'reading' stamp: 'mu 4/30/2011 23:46'!readMap16	| size |	size := MpPortableUtil default readUint16From: self readStream.	^ self readMapSized: size! !!MpDecoder methodsFor: 'reading' stamp: 'mu 4/30/2011 23:46'!readMap32	| size |	size := MpPortableUtil default readUint32From: self readStream.	^ self readMapSized: size! !!MpDecoder methodsFor: 'reading' stamp: 'mu 7/15/2011 23:47'!readNegativeFixNum: firstByte	| val |	val := (firstByte bitAnd: 2r11111).	^ val - 32! !!MpDecoder methodsFor: 'reading' stamp: 'mu 4/29/2011 23:40'!readNil	^nil! !!MpDecoder methodsFor: 'reading' stamp: 'mu 4/30/2011 23:18'!readPositiveFixNum: firstByte	"0 - 127"	^ firstByte! !!MpDecoder methodsFor: 'reading' stamp: 'mu 5/1/2011 17:12'!readRaw16	| size |	size := MpPortableUtil default readUint16From: self readStream.	^self readStream next: size! !!MpDecoder methodsFor: 'reading' stamp: 'mu 5/1/2011 22:46'!readRaw32	| size |	size := MpPortableUtil default readUint32From: self readStream.	^self readStream next: size! !!MpDecoder methodsFor: 'reading' stamp: 'mu 4/30/2011 23:16'!readTrue	^true! !!MpDecoder methodsFor: 'reading-helper' stamp: 'mu 4/30/2011 23:46'!readArraySized: size	| array |	array := self createArray: size.	1 to: size do: [:idx |		array at: idx put: (self readObject)	].	^array! !!MpDecoder methodsFor: 'reading-helper' stamp: 'mu 4/30/2011 23:47'!readMapSized: size	| dic |	dic := self createDictionary: size.	1 to: size do: [:idx |		dic at: self readObject put: self readObject	].	^dic! !!MpDecoder methodsFor: 'reading-helper' stamp: 'mu 4/30/2011 23:33'!readType	^self readStream next! !!MpDecoder methodsFor: 'reading-integer' stamp: 'mu 5/1/2011 16:06'!readInt16	^ MpPortableUtil default readInt16From: self readStream! !!MpDecoder methodsFor: 'reading-integer' stamp: 'mu 5/1/2011 16:06'!readInt32	^ MpPortableUtil default readInt32From: self readStream! !!MpDecoder methodsFor: 'reading-integer' stamp: 'mu 5/1/2011 16:03'!readInt64	^ MpPortableUtil default readInt64From: self readStream! !!MpDecoder methodsFor: 'reading-integer' stamp: 'mu 5/1/2011 16:50'!readInt8	| val |	val := self readStream next.	val >= 128 ifTrue: [^(256 - val) negated].	^val! !!MpDecoder methodsFor: 'reading-integer' stamp: 'mu 4/30/2011 23:31'!readUint16	^ MpPortableUtil default readUint16From: self readStream! !!MpDecoder methodsFor: 'reading-integer' stamp: 'mu 4/30/2011 23:32'!readUint32	^ MpPortableUtil default readUint32From: self readStream! !!MpDecoder methodsFor: 'reading-integer' stamp: 'mu 4/30/2011 23:32'!readUint64	^ MpPortableUtil default readUint64From: self readStream! !!MpDecoder methodsFor: 'reading-integer' stamp: 'mu 4/30/2011 23:30'!readUint8	^ self readStream next! !!MpDecoder methodsFor: 'dispatching' stamp: 'mu 5/8/2011 23:12'!readObject	| type |	type := self readType.	^ self readObjectOf: type	! !!MpDecoder methodsFor: 'dispatching' stamp: 'mu 5/8/2011 23:11'!readObjectOf: type	^ self readObjectOf: type ifNotApplied: [self signalError]		! !!MpDecoder methodsFor: 'dispatching' stamp: 'mu 6/23/2011 12:03'!readObjectOf: type ifNotApplied: aBlock		type <=16rBF ifTrue: [ | fixMapOrArray |		type <= 16r7F ifTrue: [^ self readPositiveFixNum: type].		fixMapOrArray := type bitShift: -4.		fixMapOrArray = 2r1000 ifTrue: [^ self readFixMap: type].		fixMapOrArray = 2r1001 ifTrue: [^ self readFixArray: type].		^ self readFixRaw: type.	].	(type bitShift: -5) = 2r111 ifTrue: [^ self readNegativeFixNum: type].	^self typeMapper readObjectOf: type ifNotApplied: aBlock! !!MpDecoder methodsFor: 'accessing' stamp: 'mu 4/29/2011 23:40'!readStream	"Answer the value of readStream"	^ readStream! !!MpDecoder methodsFor: 'accessing' stamp: 'mu 4/29/2011 23:40'!readStream: anObject	"Set the value of readStream"	readStream := anObject! !!MpDecoder methodsFor: 'accessing' stamp: 'mu 4/29/2011 23:40'!settings	^settings ifNil: [settings := self settingsClass new]! !!MpDecoder methodsFor: 'accessing' stamp: 'mu 4/29/2011 23:40'!typeMapper	^ typeMapper ifNil: [typeMapper := self typeMapperClass on: self].! !!MpDecoder methodsFor: 'signaling error' stamp: 'mu 5/2/2011 14:15'!signalError	self signalError: 'Cannot decode'! !!MpDecoder methodsFor: 'signaling error' stamp: 'mu 5/2/2011 14:15'!signalError: message	^MpPortableUtil default signalException: (MpError decode messageText: message) ! !!MpDecoder class methodsFor: 'actions' stamp: 'mu 4/29/2011 23:40'!decode: byteArray	^self new decode: byteArray! !!MpDecoder class methodsFor: 'actions' stamp: 'mu 4/29/2011 23:40'!decodeFrom: aStream	^self new decodeFrom: aStream! !!MpDecoder class methodsFor: 'actions' stamp: 'mu 5/15/2011 00:40'!on: aStream	^self new readStream: aStream "binary"! !!MpDecoder class methodsFor: 'actions' stamp: 'mu 4/29/2011 23:40'!onBytes: byteArray	^self on: (ReadStream on: byteArray)! !!MpEncoder methodsFor: 'accessing' stamp: 'mu 4/29/2011 15:07'!contents	^self writeStream contents! !!MpEncoder methodsFor: 'accessing' stamp: 'mu 4/29/2011 15:07'!settings	^settings ifNil: [settings := self settingsClass new]! !!MpEncoder methodsFor: 'accessing' stamp: 'mu 4/29/2011 15:07'!typeMapper	^ typeMapper ifNil: [typeMapper := self typeMapperClass on: self].! !!MpEncoder methodsFor: 'accessing' stamp: 'mu 4/29/2011 15:08'!typeMapperClass	^MpPortableUtil default encodeTypeMapperClass! !!MpEncoder methodsFor: 'accessing' stamp: 'mu 4/29/2011 15:07'!writeStream	writeStream isNil		ifTrue: [writeStream := WriteStream						on: (ByteArray new: self settings defaultStreamSize)].	^ writeStream! !!MpEncoder methodsFor: 'accessing' stamp: 'mu 4/29/2011 15:07'!writeStream: anObject	"Set the value of writeStream"	writeStream := anObject! !!MpEncoder methodsFor: 'encoding' stamp: 'mu 4/29/2011 15:07'!encode: anObject	^self encode: anObject on: self writeStream! !!MpEncoder methodsFor: 'encoding' stamp: 'mu 4/29/2011 15:07'!encode: anObject on: aStream	self write: anObject on: aStream.	^self contents.! !!MpEncoder methodsFor: 'encoding' stamp: 'mu 4/29/2011 15:12'!write: anObject on: aStream	self writeStream: aStream "binary".	self writeObject: anObject! !!MpEncoder methodsFor: 'stream-like' stamp: 'mu 6/7/2011 17:50'!nextPut: anObject	self writeObject: anObject! !!MpEncoder methodsFor: 'stream-like' stamp: 'mu 6/7/2011 17:56'!nextPutAll: aCollection	aCollection do: [:each | self nextPut: each]! !!MpEncoder methodsFor: 'factory' stamp: 'mu 4/29/2011 15:13'!settingsClass	^MpSettings! !!MpEncoder methodsFor: 'signaling error' stamp: 'mu 5/2/2011 14:13'!signalError	self signalError: 'Cannot encode'! !!MpEncoder methodsFor: 'signaling error' stamp: 'mu 5/2/2011 14:13'!signalError: message	^MpPortableUtil default signalException: (MpError encode messageText: message) ! !!MpEncoder methodsFor: 'writing' stamp: 'mu 5/3/2011 23:24'!writeArray: array	| size |	size := array size.	self writeArraySize: size.	array do: [:each | self writeObject: each].	! !!MpEncoder methodsFor: 'writing' stamp: 'mu 4/29/2011 16:23'!writeDouble: aFloat	self writeStream nextPut: MpConstants double.	MpPortableUtil default writeDouble: aFloat to: self writeStream! !!MpEncoder methodsFor: 'writing' stamp: 'mu 4/29/2011 15:24'!writeFalse: ignore	self writeStream nextPut: MpConstants falseValue! !!MpEncoder methodsFor: 'writing' stamp: 'mu 4/29/2011 16:22'!writeFloat: aFloat	self writeStream nextPut: MpConstants float.	MpPortableUtil default writeFloat: aFloat to: self writeStream! !!MpEncoder methodsFor: 'writing' stamp: 'mu 5/2/2011 14:14'!writeInteger: anInteger 	(anInteger between: 0 and: 127)		ifTrue: [^self writePositiveFixNum: anInteger].			(anInteger between: -32 and: -1)		ifTrue: [^self writeNegativeFixNum: anInteger].		anInteger >= 128 ifTrue: [		anInteger <= 255 ifTrue: [^self writeUint8: anInteger].		anInteger <= 65535 ifTrue: [^self writeUint16: anInteger].		anInteger <= 4294967295 ifTrue: [^self writeUint32: anInteger].		anInteger <= 18446744073709551615 ifTrue: [^self writeUint64: anInteger].	].		anInteger >= -128 ifTrue: [^self writeInt8: anInteger].	anInteger >= -32768 ifTrue: [^self writeInt16: anInteger].	anInteger >= -2147483648 ifTrue: [^self writeInt32: anInteger].	anInteger >= -9223372036854775808 ifTrue: [^self writeInt64: anInteger].		self signalError! !!MpEncoder methodsFor: 'writing' stamp: 'mu 5/3/2011 23:28'!writeMap: aDictionary	| size |	size := aDictionary size.	self writeMapSize: size.	aDictionary keysAndValuesDo: [:key :value | self writeObject: key; writeObject: value].! !!MpEncoder methodsFor: 'writing' stamp: 'mu 4/29/2011 15:24'!writeNil: ignore	self writeStream nextPut: MpConstants nilValue! !!MpEncoder methodsFor: 'writing' stamp: 'mu 5/3/2011 23:31'!writeRawBytes: bytes	| size |	size := bytes size.	self writeRawBytesSize: size.	self writeStream nextPutAll: bytes! !!MpEncoder methodsFor: 'writing' stamp: 'mu 4/29/2011 15:24'!writeTrue: ignore	self writeStream nextPut: MpConstants trueValue! !!MpEncoder methodsFor: 'writing-helper' stamp: 'mu 5/3/2011 23:24'!writeArraySize: size	size < 16r10 ifTrue: [^ self writeStream nextPut: (2r10010000 bitOr: size)].	size < 16r10000  ifTrue: [		self writeStream nextPut: MpConstants array16.		^MpPortableUtil default writeUint16: size to: self writeStream	].	size < 16r100000000  ifTrue: [		self writeStream nextPut: MpConstants array32.		^MpPortableUtil default writeUint32: size to: self writeStream	].		self signalError! !!MpEncoder methodsFor: 'writing-helper' stamp: 'mu 4/29/2011 15:51'!writeInt16: value	self writeStream nextPut: MpConstants int16.	MpPortableUtil default writeInt16: value to: self writeStream! !!MpEncoder methodsFor: 'writing-helper' stamp: 'mu 4/29/2011 15:51'!writeInt32: value	self writeStream nextPut: MpConstants int32.	MpPortableUtil default writeInt32: value to: self writeStream! !!MpEncoder methodsFor: 'writing-helper' stamp: 'mu 4/29/2011 15:51'!writeInt64: value	self writeStream nextPut: MpConstants int64.	MpPortableUtil default writeInt64: value to: self writeStream! !!MpEncoder methodsFor: 'writing-helper' stamp: 'mu 5/1/2011 16:54'!writeInt8: value	| val |	self writeStream nextPut: MpConstants int8.	val := value < 0 ifTrue: [256 + value] ifFalse: [value].	self writeStream nextPut: val! !!MpEncoder methodsFor: 'writing-helper' stamp: 'mu 5/3/2011 23:27'!writeMapSize: size	size < 16r10 ifTrue: [^ self writeStream nextPut: (2r10000000 bitOr: size)].	size < 16r10000  ifTrue: [		self writeStream nextPut: MpConstants map16.		^MpPortableUtil default writeUint16: size to: self writeStream	].	size < 16r100000000  ifTrue: [		self writeStream nextPut: MpConstants map32.		^MpPortableUtil default writeUint32: size to: self writeStream	].		self signalError! !!MpEncoder methodsFor: 'writing-helper' stamp: 'mu 7/15/2011 23:47'!writeNegativeFixNum: number	"-32 to -1"	| val |	val :=  256 + number.	self writeStream nextPut: val! !!MpEncoder methodsFor: 'writing-helper' stamp: 'mu 4/29/2011 15:27'!writePositiveFixNum: number	self writeStream nextPut: number	! !!MpEncoder methodsFor: 'writing-helper' stamp: 'mu 5/3/2011 23:30'!writeRawBytesSize: size	size < 16r10 ifTrue: [^ self writeStream nextPut: (2r10100000 bitOr: size)].	size < 16r10000  ifTrue: [		self writeStream nextPut: MpConstants raw16.		^MpPortableUtil default writeUint16: size to: self writeStream	].	size < 16r100000000  ifTrue: [		self writeStream nextPut: MpConstants raw32.		^MpPortableUtil default writeUint32: size to: self writeStream	].		self signalError! !!MpEncoder methodsFor: 'writing-helper' stamp: 'mu 4/29/2011 15:38'!writeUint16: value	self writeStream nextPut: MpConstants uint16.	MpPortableUtil default writeUint16: value to: self writeStream! !!MpEncoder methodsFor: 'writing-helper' stamp: 'mu 4/29/2011 15:39'!writeUint32: value	self writeStream nextPut: MpConstants uint32.	MpPortableUtil default writeUint32: value to: self writeStream! !!MpEncoder methodsFor: 'writing-helper' stamp: 'mu 4/29/2011 15:49'!writeUint64: value	self writeStream nextPut: MpConstants uint64.	MpPortableUtil default writeUint64: value to: self writeStream! !!MpEncoder methodsFor: 'writing-helper' stamp: 'mu 4/29/2011 15:38'!writeUint8: value	self writeStream nextPut: MpConstants uint8.	self writeStream nextPut: value! !!MpEncoder methodsFor: 'dispatching' stamp: 'mu 5/2/2011 14:14'!writeObject: anObject 	^self		writeObject: anObject		ifNotApplied: [self signalError]! !!MpEncoder methodsFor: 'dispatching' stamp: 'mu 4/29/2011 15:07'!writeObject: anObject ifNotApplied: aBlock 	^self typeMapper writeObject: anObject ifNotApplied: aBlock! !!MpEncoder class methodsFor: 'actions' stamp: 'mu 4/29/2011 15:07'!encode: anObject 	^self new encode: anObject! !!MpEncoder class methodsFor: 'actions' stamp: 'mu 4/29/2011 15:07'!encode: anObject on: aStream	^self new encode: anObject on: aStream! !!MpEncoder class methodsFor: 'actions' stamp: 'mu 4/29/2011 15:07'!on: aStream	^self new writeStream: aStream; yourself! !!MpEncoder class methodsFor: 'actions' stamp: 'mu 4/29/2011 15:07'!onBytes: byteArray	^self on: (WriteStream on: byteArray).! !!MpError methodsFor: 'accessing' stamp: 'mu 5/2/2011 14:11'!type	"Answer the value of type"	^ type! !!MpError methodsFor: 'accessing' stamp: 'mu 5/2/2011 14:11'!type: anObject	"Set the value of type"	type := anObject! !!MpError class methodsFor: 'instance creation' stamp: 'mu 5/2/2011 14:11'!decode	^self new type: #decode! !!MpError class methodsFor: 'instance creation' stamp: 'mu 5/2/2011 14:11'!encode	^self new type: #encode! !!MpMessagePack class methodsFor: 'utilities' stamp: 'mu 5/1/2011 15:44'!pack: anObject	^ MpEncoder encode: anObject! !!MpMessagePack class methodsFor: 'utilities' stamp: 'mu 5/1/2011 21:16'!packUnpack: anObject	^self unpack: (self pack: anObject)! !!MpMessagePack class methodsFor: 'utilities' stamp: 'mu 5/1/2011 15:44'!unpack: aByteArray	^ MpDecoder decode: aByteArray! !!MpPortableUtil methodsFor: 'testing' stamp: 'mu 6/23/2011 12:36'!collectionEquals: aCollection with: otherCollection	"For testing"	^ aCollection = otherCollection! !!MpPortableUtil methodsFor: 'factory' stamp: 'mu 4/29/2011 23:24'!encodeTypeMapperClass	^MpEncodeTypeMapper! !!MpPortableUtil methodsFor: 'factory' stamp: 'mu 6/23/2011 12:34'!newCollection: aCollectionClass sized: size withAll: elem	"For testing"	^ aCollectionClass new: size withAll: elem! !!MpPortableUtil methodsFor: 'factory' stamp: 'mu 6/23/2011 12:33'!randomClass	"For testing"	^Smalltalk at: #Random! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 5/29/2011 23:56'!readDoubleFrom: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 5/29/2011 23:56'!readFloatFrom: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/30/2011 23:35'!readInt16From: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/29/2011 15:08'!readInt32From: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/30/2011 23:35'!readInt64From: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/29/2011 15:08'!readUint16From: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/29/2011 15:08'!readUint32From: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/30/2011 23:35'!readUint64From: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/29/2011 16:16'!writeDouble: value to: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/29/2011 16:16'!writeFloat: value to: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/30/2011 23:35'!writeInt16: value to: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/29/2011 15:08'!writeInt32: value to: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/30/2011 23:35'!writeInt64: value to: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/29/2011 15:08'!writeUint16: value to: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/29/2011 15:08'!writeUint32: value to: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions-stream' stamp: 'mu 4/30/2011 23:35'!writeUint64: value to: stream	self subclassResponsibility ! !!MpPortableUtil methodsFor: 'actions' stamp: 'mu 5/2/2011 13:53'!signalException: anException	"Ansi"	^anException signal! !!MpPortableUtil class methodsFor: 'instance creation' stamp: 'mu 4/29/2011 15:08'!default	^Default ifNil: [Default := self dialectSpecificClass new]! !!MpPortableUtil class methodsFor: 'factory' stamp: 'mu 5/5/2011 22:14'!dialectSpecificClass	^DialectSpecificClass ifNil: [DialectSpecificClass := self subclasses at: 1]! !!MpPortableUtil class methodsFor: 'factory' stamp: 'mu 4/29/2011 15:08'!dialectSpecificClass: aClass	DialectSpecificClass := aClass! !!MpPortableUtil class methodsFor: 'class initialization' stamp: 'mu 4/29/2011 15:08'!initialize	Default := nil.	DialectSpecificClass := nil! !!MpSettings methodsFor: 'actions-dictionary' stamp: 'mu 4/29/2011 15:12'!at: key	^self settingsDict at: key! !!MpSettings methodsFor: 'actions-dictionary' stamp: 'mu 4/29/2011 15:12'!at: key ifAbsent: aBlock	^self settingsDict at: key ifAbsent: aBlock! !!MpSettings methodsFor: 'actions-dictionary' stamp: 'mu 4/29/2011 15:12'!at: key ifAbsentPut: aBlock	^self settingsDict at: key ifAbsentPut: aBlock! !!MpSettings methodsFor: 'actions-dictionary' stamp: 'mu 5/11/2011 23:24'!at: key put: value	^self settingsDict at: key put: value! !!MpSettings methodsFor: 'actions-dictionary' stamp: 'mu 4/29/2011 15:12'!includesKey: key	^self settingsDict includesKey: key! !!MpSettings methodsFor: 'actions-dictionary' stamp: 'mu 4/29/2011 15:12'!keys	^self settingsDict keys! !!MpSettings methodsFor: 'accessing' stamp: 'mu 4/29/2011 15:12'!defaultStreamSize	^self at: #defaultStreamSize ifAbsentPut: [1024]! !!MpSettings methodsFor: 'accessing' stamp: 'mu 4/29/2011 15:12'!defaultStreamSize: anInteger	^self at: #defaultStreamSize put: anInteger! !!MpSettings methodsFor: 'class initialization' stamp: 'mu 4/29/2011 15:12'!initialize	settingsDict := nil! !!MpSettings methodsFor: 'accessing-private' stamp: 'mu 4/29/2011 15:12'!settingsDict	^ settingsDict ifNil: [settingsDict := IdentityDictionary new]! !!MpTypeMapper methodsFor: 'accessing' stamp: 'mu 4/29/2011 15:15'!actionMap	^ actionMap ifNil: [actionMap := IdentityDictionary new]! !!MpTypeMapper methodsFor: 'accessing' stamp: 'mu 4/29/2011 15:15'!defaultActionMap	^ self class actionMap! !!MpTypeMapper methodsFor: 'initialization' stamp: 'mu 4/29/2011 15:15'!initActionMaps	"override for custom mapping"	actionMap := nil! !!MpDecodeTypeMapper methodsFor: 'accessing' stamp: 'mu 4/29/2011 23:40'!decoder	"Answer the value of decoder"	^ decoder! !!MpDecodeTypeMapper methodsFor: 'accessing' stamp: 'mu 4/29/2011 23:40'!decoder: anObject	"Set the value of decoder"	decoder := anObject! !!MpDecodeTypeMapper methodsFor: 'actions' stamp: 'mu 4/30/2011 22:58'!readObjectOf: typeCode ifNotApplied: aBlock 	| actionSelector |		actionMap		ifNotNil: [actionSelector := self actionMap at: typeCode ifAbsent: [].			actionSelector ifNotNil: [^ self decoder perform: actionSelector]].		actionSelector := self defaultActionMap				at: typeCode				ifAbsent: [^ aBlock value].	^ self decoder perform: actionSelector! !!MpEncodeTypeMapper methodsFor: 'accessing' stamp: 'mu 4/29/2011 15:15'!encoder	"Answer the value of encoder"	^ encoder! !!MpEncodeTypeMapper methodsFor: 'accessing' stamp: 'mu 4/29/2011 15:15'!encoder: anObject	"Set the value of encoder"	encoder := anObject! !!MpEncodeTypeMapper methodsFor: 'actions' stamp: 'mu 4/29/2011 15:16'!writeObject: anObject ifNotApplied: aBlock 	| actionSelector |	actionMap		ifNotNil: [actionSelector := self actionMap at: anObject class ifAbsent: [].			actionSelector ifNotNil: [^ self encoder perform: actionSelector with: anObject]].			actionSelector := self defaultActionMap				at: anObject class				ifAbsent: [^ aBlock value].	^ self encoder perform: actionSelector with: anObject! !!MpTypeMapper class methodsFor: 'accessing' stamp: 'mu 4/29/2011 15:15'!actionMap	^ actionMap ifNil: [actionMap := self createActionMap]! !!MpTypeMapper class methodsFor: 'factory' stamp: 'mu 4/29/2011 15:15'!createActionMap	| map |	map := IdentityDictionary new.	self definePrimitivesActionsTo: map.	self defineCompoundsActionsTo: map.	^map! !!MpTypeMapper class methodsFor: 'actions for compounds' stamp: 'mu 4/29/2011 15:15'!defineCompoundsActionsTo: map	"override"! !!MpTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/29/2011 15:15'!definePrimitivesActionsTo: map	"override"! !!MpTypeMapper class methodsFor: 'class initialization' stamp: 'mu 4/29/2011 22:38'!initialize	"self initialize"	actionMap  := nil.	self actionMap	! !!MpTypeMapper class methodsFor: 'class initialization' stamp: 'mu 4/29/2011 22:19'!initializeAll	"self initializeAll"	self allSubclasses do: [:each | each initialize]! !!MpDecodeTypeMapper class methodsFor: 'actions for compounds' stamp: 'mu 4/30/2011 22:51'!defineArrayActionTo: map	map at: MpConstants array16 put: #readArray16.	map at: MpConstants array32 put: #readArray32.		! !!MpDecodeTypeMapper class methodsFor: 'actions for compounds' stamp: 'mu 4/30/2011 22:33'!defineCompoundsActionsTo: map	self defineArrayActionTo: map.	self defineMapActionTo: map.! !!MpDecodeTypeMapper class methodsFor: 'actions for compounds' stamp: 'mu 4/30/2011 22:51'!defineMapActionTo: map		map at: MpConstants map16 put: #readMap16.	map at: MpConstants map32 put: #readMap32.! !!MpDecodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/30/2011 22:44'!defineDoubleActionTo: map	map at: MpConstants double put: #readDouble! !!MpDecodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/30/2011 22:43'!defineFalseActionTo: map	map at: MpConstants falseValue put: #readFalse! !!MpDecodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/30/2011 22:43'!defineFloatActionTo: map	map at: MpConstants float put: #readFloat! !!MpDecodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/30/2011 22:47'!defineIntegerActionTo: map	map at: MpConstants int8 put: #readInt8.	map at: MpConstants int16 put: #readInt16.	map at: MpConstants int32 put: #readInt32.	map at: MpConstants int64 put: #readInt64.! !!MpDecodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/30/2011 22:43'!defineNilActionTo: map	map at: MpConstants nilValue put: #readNil! !!MpDecodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/30/2011 22:50'!definePrimitivesActionsTo: map	self defineNilActionTo: map.	self defineFalseActionTo: map.	self defineTrueActionTo: map.	self defineFloatActionTo: map.	self defineDoubleActionTo: map.	self defineUnsignedIntegerActionTo: map.	self defineIntegerActionTo: map.	self defineRawBytesActionTo: map.	! !!MpDecodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/30/2011 22:48'!defineRawBytesActionTo: map	map at: MpConstants raw16 put: #readRaw16.	map at: MpConstants raw32 put: #readRaw32.! !!MpDecodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/30/2011 22:43'!defineTrueActionTo: map	map at: MpConstants trueValue put: #readTrue! !!MpDecodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/30/2011 22:46'!defineUnsignedIntegerActionTo: map	map at: MpConstants uint8 put: #readUint8.	map at: MpConstants uint16 put: #readUint16.	map at: MpConstants uint32 put: #readUint32.	map at: MpConstants uint64 put: #readUint64.! !!MpDecodeTypeMapper class methodsFor: 'instance creation' stamp: 'mu 4/29/2011 23:40'!on: bertDecoder 	^ self new decoder: bertDecoder;		 initActionMaps;		 yourself! !!MpEncodeTypeMapper class methodsFor: 'actions for compounds' stamp: 'mu 4/29/2011 23:25'!defineArrayActionTo: map	map at: Array put: #writeArray:.! !!MpEncodeTypeMapper class methodsFor: 'actions for compounds' stamp: 'mu 4/29/2011 22:38'!defineCompoundsActionsTo: map	self defineArrayActionTo: map.	self defineMapActionTo: map.	! !!MpEncodeTypeMapper class methodsFor: 'actions for compounds' stamp: 'mu 4/29/2011 23:29'!defineMapActionTo: map		map at: Dictionary put: #writeMap:.	"map at: IdentityDictionary put: #writeDictionary:"		! !!MpEncodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/29/2011 23:11'!defineDoubleActionTo: map	"Some dialect does not support Double"	"map at: Double put: #writeDouble:"! !!MpEncodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/29/2011 15:15'!defineFalseActionTo: map	map at: False put: #writeFalse:! !!MpEncodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/29/2011 23:12'!defineFloatActionTo: map	"Suppose 32 bit float - Some dialect does not support it"	"map at: Float put: #writeFloat:"! !!MpEncodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/29/2011 15:15'!defineIntegerActionTo: map	Integer allSubclasses do: [:each |		map at: each put: #writeInteger:	]! !!MpEncodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/29/2011 15:15'!defineNilActionTo: map	map at: UndefinedObject put: #writeNil:! !!MpEncodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/29/2011 22:07'!definePrimitivesActionsTo: map	self defineRawBytesActionTo: map.	self defineIntegerActionTo: map.	self defineFloatActionTo: map.	self defineDoubleActionTo: map.	self defineNilActionTo: map.	self defineTrueActionTo: map.	self defineFalseActionTo: map.! !!MpEncodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/29/2011 22:01'!defineRawBytesActionTo: map	map at: ByteArray put: #writeRawBytes:! !!MpEncodeTypeMapper class methodsFor: 'actions for primitives' stamp: 'mu 4/29/2011 15:15'!defineTrueActionTo: map	map at: True put: #writeTrue:! !!MpEncodeTypeMapper class methodsFor: 'instance creation' stamp: 'mu 4/29/2011 15:15'!on: bertEncoder 	^ self new encoder: bertEncoder;		 initActionMaps;		 yourself! !MpTypeMapper initialize!MpPortableUtil initialize!